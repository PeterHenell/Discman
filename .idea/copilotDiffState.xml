<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.ksp)&#10;    alias(libs.plugins.hilt)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.peterhenell.discman&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.peterhenell.discman&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.14&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Room&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    ksp(libs.androidx.room.compiler)&#10;&#10;    // Navigation&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    implementation(libs.androidx.hilt.navigation.compose)&#10;    ksp(libs.hilt.compiler)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.ksp)&#10;    alias(libs.plugins.hilt)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.peterhenell.discman&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.peterhenell.discman&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.15&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Room&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    ksp(libs.androidx.room.compiler)&#10;&#10;    // Navigation&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    implementation(libs.androidx.hilt.navigation.compose)&#10;    ksp(libs.hilt.compiler)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Discman&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.Discman&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.DiscmanApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Discman&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.Discman&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/DiscmanApp.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/DiscmanApp.kt" />
              <option name="originalContent" value="package com.peterhenell.discman.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.navigation.NavDestination.Companion.hierarchy&#10;import androidx.navigation.NavGraph.Companion.findStartDestination&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import com.peterhenell.discman.ui.courses.CoursesScreen&#10;import com.peterhenell.discman.ui.courses.CourseEditScreen&#10;import com.peterhenell.discman.ui.game.PlayGameScreen&#10;import com.peterhenell.discman.ui.game.GameScoringScreen&#10;import com.peterhenell.discman.ui.game.CompletedGameScreen&#10;import com.peterhenell.discman.ui.game.HistoricGamesScreen&#10;import com.peterhenell.discman.ui.players.PlayersScreen&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DiscmanApp(modifier: Modifier = Modifier) {&#10;    val navController = rememberNavController()&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            NavigationBar {&#10;                val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;                val currentDestination = navBackStackEntry?.destination&#10;&#10;                bottomNavItems.forEach { item -&gt;&#10;                    NavigationBarItem(&#10;                        icon = { Icon(item.icon, contentDescription = item.label) },&#10;                        label = { Text(item.label) },&#10;                        selected = currentDestination?.hierarchy?.any { it.route == item.route } == true,&#10;                        onClick = {&#10;                            navController.navigate(item.route) {&#10;                                popUpTo(navController.graph.findStartDestination().id) {&#10;                                    saveState = true&#10;                                }&#10;                                launchSingleTop = true&#10;                                restoreState = true&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        modifier = modifier&#10;    ) { innerPadding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = &quot;courses&quot;,&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            composable(&quot;courses&quot;) {&#10;                CoursesScreen(navController = navController)&#10;            }&#10;            composable(&quot;course_edit&quot;) {&#10;                CourseEditScreen(navController = navController)&#10;            }&#10;            composable(&quot;play&quot;) {&#10;                PlayGameScreen(navController = navController)&#10;            }&#10;            composable(&quot;history&quot;) {&#10;                HistoricGamesScreen(navController = navController)&#10;            }&#10;            composable(&quot;players&quot;) {&#10;                PlayersScreen()&#10;            }&#10;            composable(&quot;game_scoring/{gameId}&quot;) { backStackEntry -&gt;&#10;                val gameId = backStackEntry.arguments?.getString(&quot;gameId&quot;)?.toLongOrNull() ?: 0L&#10;                GameScoringScreen(&#10;                    gameId = gameId,&#10;                    navController = navController&#10;                )&#10;            }&#10;            composable(&quot;completed_game/{gameId}&quot;) { backStackEntry -&gt;&#10;                val gameId = backStackEntry.arguments?.getString(&quot;gameId&quot;)?.toLongOrNull() ?: 0L&#10;                CompletedGameScreen(&#10;                    gameId = gameId,&#10;                    navController = navController&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class BottomNavItem(&#10;    val route: String,&#10;    val icon: ImageVector,&#10;    val label: String&#10;)&#10;&#10;val bottomNavItems = listOf(&#10;    BottomNavItem(&quot;courses&quot;, Icons.Default.Place, &quot;Courses&quot;),&#10;    BottomNavItem(&quot;play&quot;, Icons.Default.PlayArrow, &quot;Play&quot;),&#10;    BottomNavItem(&quot;history&quot;, Icons.Default.DateRange, &quot;History&quot;),&#10;    BottomNavItem(&quot;players&quot;, Icons.Default.Person, &quot;Players&quot;)&#10;)&#10;" />
              <option name="updatedContent" value="package com.peterhenell.discman.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.navigation.NavDestination.Companion.hierarchy&#10;import androidx.navigation.NavGraph.Companion.findStartDestination&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import com.peterhenell.discman.ui.courses.CoursesScreen&#10;import com.peterhenell.discman.ui.courses.CourseEditScreen&#10;import com.peterhenell.discman.ui.game.PlayGameScreen&#10;import com.peterhenell.discman.ui.game.GameScoringScreen&#10;import com.peterhenell.discman.ui.game.CompletedGameScreen&#10;import com.peterhenell.discman.ui.game.HistoricGamesScreen&#10;import com.peterhenell.discman.ui.players.PlayersScreen&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DiscmanApp(modifier: Modifier = Modifier) {&#10;    val navController = rememberNavController()&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            NavigationBar {&#10;                val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;                val currentDestination = navBackStackEntry?.destination&#10;&#10;                bottomNavItems.forEach { item -&gt;&#10;                    NavigationBarItem(&#10;                        icon = { Icon(item.icon, contentDescription = item.label) },&#10;                        label = { Text(item.label) },&#10;                        selected = currentDestination?.hierarchy?.any { it.route == item.route } == true,&#10;                        onClick = {&#10;                            navController.navigate(item.route) {&#10;                                popUpTo(navController.graph.findStartDestination().id) {&#10;                                    saveState = true&#10;                                }&#10;                                launchSingleTop = true&#10;                                restoreState = true&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        modifier = modifier&#10;    ) { innerPadding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = &quot;courses&quot;,&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            composable(&quot;courses&quot;) {&#10;                CoursesScreen(navController = navController)&#10;            }&#10;            composable(&quot;course_edit&quot;) {&#10;                CourseEditScreen(navController = navController)&#10;            }&#10;            composable(&quot;course_edit/{courseId}&quot;) { backStackEntry -&gt;&#10;                val courseId = backStackEntry.arguments?.getString(&quot;courseId&quot;)?.toLongOrNull() ?: 0L&#10;                CourseEditScreen(&#10;                    navController = navController,&#10;                    courseId = if (courseId == 0L) null else courseId&#10;                )&#10;            }&#10;            composable(&quot;play&quot;) {&#10;                PlayGameScreen(navController = navController)&#10;            }&#10;            composable(&quot;history&quot;) {&#10;                HistoricGamesScreen(navController = navController)&#10;            }&#10;            composable(&quot;players&quot;) {&#10;                PlayersScreen()&#10;            }&#10;            composable(&quot;game_scoring/{gameId}&quot;) { backStackEntry -&gt;&#10;                val gameId = backStackEntry.arguments?.getString(&quot;gameId&quot;)?.toLongOrNull() ?: 0L&#10;                GameScoringScreen(&#10;                    gameId = gameId,&#10;                    navController = navController&#10;                )&#10;            }&#10;            composable(&quot;completed_game/{gameId}&quot;) { backStackEntry -&gt;&#10;                val gameId = backStackEntry.arguments?.getString(&quot;gameId&quot;)?.toLongOrNull() ?: 0L&#10;                CompletedGameScreen(&#10;                    gameId = gameId,&#10;                    navController = navController&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class BottomNavItem(&#10;    val route: String,&#10;    val icon: ImageVector,&#10;    val label: String&#10;)&#10;&#10;val bottomNavItems = listOf(&#10;    BottomNavItem(&quot;courses&quot;, Icons.Default.Place, &quot;Courses&quot;),&#10;    BottomNavItem(&quot;play&quot;, Icons.Default.PlayArrow, &quot;Play&quot;),&#10;    BottomNavItem(&quot;history&quot;, Icons.Default.DateRange, &quot;History&quot;),&#10;    BottomNavItem(&quot;players&quot;, Icons.Default.Person, &quot;Players&quot;)&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/courses/CourseEditScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/courses/CourseEditScreen.kt" />
              <option name="originalContent" value="package com.peterhenell.discman.ui.courses&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import com.peterhenell.discman.data.entities.Hole&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CourseEditScreen(&#10;    navController: NavController,&#10;    viewModel: CourseViewModel = hiltViewModel(),&#10;    courseId: Long? = null&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val course = uiState.editingCourse&#10;    val holes = uiState.editingHoles&#10;&#10;    // Initialize based on courseId parameter&#10;    LaunchedEffect(courseId) {&#10;        if (courseId != null) {&#10;            // Edit existing course&#10;            viewModel.loadCourse(courseId)&#10;        } else {&#10;            // Create new course&#10;            viewModel.startNewCourse()&#10;        }&#10;    }&#10;&#10;    // Show loading while waiting for course data&#10;    if (course == null) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator()&#10;        }&#10;        return&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Top bar with actions&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            TextButton(onClick = {&#10;                viewModel.clearEditing()&#10;                navController.popBackStack()&#10;            }) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;&#10;            Text(&#10;                text = if (course.courseId == 0L) &quot;Add Course&quot; else &quot;Edit Course&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;&#10;            TextButton(&#10;                onClick = {&#10;                    viewModel.saveCourse()&#10;                    navController.popBackStack()&#10;                }&#10;            ) {&#10;                Text(&quot;Done&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Course details&#10;        OutlinedTextField(&#10;            value = course.name,&#10;            onValueChange = { viewModel.updateCourseName(it) },&#10;            label = { Text(&quot;Course Name&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        OutlinedTextField(&#10;            value = course.location,&#10;            onValueChange = { viewModel.updateCourseLocation(it) },&#10;            label = { Text(&quot;Location&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Holes section&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Holes (${holes.size})&quot;,&#10;                style = MaterialTheme.typography.titleMedium&#10;            )&#10;&#10;            Button(onClick = { viewModel.addHole() }) {&#10;                Icon(Icons.Default.Add, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Add Hole&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Box(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            val listState = rememberLazyListState()&#10;&#10;            LazyColumn(&#10;                state = listState,&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                itemsIndexed(holes) { index, hole -&gt;&#10;                    HoleEditItem(&#10;                        hole = hole,&#10;                        onUpdate = { updatedHole -&gt; viewModel.updateHole(index, updatedHole) },&#10;                        onRemove = { viewModel.removeHole(index) },&#10;                        canMoveUp = index &gt; 0,&#10;                        canMoveDown = index &lt; holes.size - 1,&#10;                        onMoveUp = { viewModel.moveHole(index, index - 1) },&#10;                        onMoveDown = { viewModel.moveHole(index, index + 1) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HoleEditItem(&#10;    hole: Hole,&#10;    onUpdate: (Hole) -&gt; Unit,&#10;    onRemove: () -&gt; Unit,&#10;    canMoveUp: Boolean,&#10;    canMoveDown: Boolean,&#10;    onMoveUp: () -&gt; Unit,&#10;    onMoveDown: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Hole ${hole.holeNumber}&quot;,&#10;                    style = MaterialTheme.typography.titleSmall&#10;                )&#10;&#10;                Row {&#10;                    if (canMoveUp) {&#10;                        IconButton(onClick = onMoveUp) {&#10;                            Icon(Icons.Default.KeyboardArrowUp, contentDescription = &quot;Move Up&quot;)&#10;                        }&#10;                    }&#10;                    if (canMoveDown) {&#10;                        IconButton(onClick = onMoveDown) {&#10;                            Icon(Icons.Default.KeyboardArrowDown, contentDescription = &quot;Move Down&quot;)&#10;                        }&#10;                    }&#10;                    IconButton(onClick = onRemove) {&#10;                        Icon(Icons.Default.Delete, contentDescription = &quot;Remove Hole&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Par adjustment&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Par:&quot;, modifier = Modifier.width(60.dp))&#10;                IconButton(&#10;                    onClick = { if (hole.par &gt; 1) onUpdate(hole.copy(par = hole.par - 1)) }&#10;                ) {&#10;                    Icon(Icons.Default.KeyboardArrowDown, contentDescription = &quot;Decrease Par&quot;)&#10;                }&#10;                Text(&#10;                    text = hole.par.toString(),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    modifier = Modifier.width(40.dp)&#10;                )&#10;                IconButton(&#10;                    onClick = { onUpdate(hole.copy(par = hole.par + 1)) }&#10;                ) {&#10;                    Icon(Icons.Default.Add, contentDescription = &quot;Increase Par&quot;)&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Distance field&#10;            OutlinedTextField(&#10;                value = hole.distance?.toString() ?: &quot;&quot;,&#10;                onValueChange = { value -&gt;&#10;                    val distance = value.toIntOrNull()&#10;                    onUpdate(hole.copy(distance = distance))&#10;                },&#10;                label = { Text(&quot;Distance (m)&quot;) },&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Description field&#10;            OutlinedTextField(&#10;                value = hole.description ?: &quot;&quot;,&#10;                onValueChange = { onUpdate(hole.copy(description = it.ifBlank { null })) },&#10;                label = { Text(&quot;Description&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.peterhenell.discman.ui.courses&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import com.peterhenell.discman.data.entities.Hole&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CourseEditScreen(&#10;    navController: NavController,&#10;    viewModel: CourseViewModel = hiltViewModel(),&#10;    courseId: Long? = null&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val course = uiState.editingCourse&#10;    val holes = uiState.editingHoles&#10;&#10;    // Initialize based on courseId parameter&#10;    LaunchedEffect(courseId) {&#10;        if (courseId != null) {&#10;            // Edit existing course&#10;            viewModel.loadCourse(courseId)&#10;        } else {&#10;            // Create new course&#10;            viewModel.startNewCourse()&#10;        }&#10;    }&#10;&#10;    // Show loading while waiting for course data&#10;    if (course == null) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator()&#10;        }&#10;        return&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Top bar with actions&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            TextButton(onClick = {&#10;                viewModel.clearEditing()&#10;                navController.popBackStack()&#10;            }) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;&#10;            Text(&#10;                text = if (course.courseId == 0L) &quot;Add Course&quot; else &quot;Edit Course&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;&#10;            TextButton(&#10;                onClick = {&#10;                    viewModel.saveCourse()&#10;                    navController.popBackStack()&#10;                }&#10;            ) {&#10;                Text(&quot;Done&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Course details&#10;        OutlinedTextField(&#10;            value = course.name,&#10;            onValueChange = { viewModel.updateCourseName(it) },&#10;            label = { Text(&quot;Course Name&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        OutlinedTextField(&#10;            value = course.location,&#10;            onValueChange = { viewModel.updateCourseLocation(it) },&#10;            label = { Text(&quot;Location&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Holes section&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Holes (${holes.size})&quot;,&#10;                style = MaterialTheme.typography.titleMedium&#10;            )&#10;&#10;            Button(onClick = { viewModel.addHole() }) {&#10;                Icon(Icons.Default.Add, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Add Hole&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Box(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            val listState = rememberLazyListState()&#10;&#10;            LazyColumn(&#10;                state = listState,&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                itemsIndexed(holes) { index, hole -&gt;&#10;                    HoleEditItem(&#10;                        hole = hole,&#10;                        onUpdate = { updatedHole -&gt; viewModel.updateHole(index, updatedHole) },&#10;                        onRemove = { viewModel.removeHole(index) },&#10;                        canMoveUp = index &gt; 0,&#10;                        canMoveDown = index &lt; holes.size - 1,&#10;                        onMoveUp = { viewModel.moveHole(index, index - 1) },&#10;                        onMoveDown = { viewModel.moveHole(index, index + 1) }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Custom scrollbar indicator&#10;            if (holes.size &gt; 1) {&#10;                val firstVisibleIndex by remember {&#10;                    derivedStateOf { listState.firstVisibleItemIndex }&#10;                }&#10;                val layoutInfo = listState.layoutInfo&#10;                val totalItems = layoutInfo.totalItemsCount&#10;                val visibleItems = layoutInfo.visibleItemsInfo.size&#10;&#10;                // Only show scrollbar if there are items that extend beyond the visible area&#10;                if (totalItems &gt; visibleItems) {&#10;                    val scrollProgress = if (totalItems &gt; 1) {&#10;                        firstVisibleIndex.toFloat() / (totalItems - visibleItems).coerceAtLeast(1)&#10;                    } else 0f&#10;&#10;                    // Scrollbar track&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .align(Alignment.CenterEnd)&#10;                            .fillMaxHeight()&#10;                            .width(4.dp)&#10;                            .padding(vertical = 8.dp)&#10;                            .background(&#10;                                Color.Gray.copy(alpha = 0.3f),&#10;                                RoundedCornerShape(2.dp)&#10;                            )&#10;                    )&#10;&#10;                    // Scrollbar thumb&#10;                    val thumbHeight = 0.3f // 30% of track height&#10;                    val thumbOffset = scrollProgress * (1f - thumbHeight)&#10;&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .align(Alignment.CenterEnd)&#10;                            .fillMaxHeight(thumbHeight)&#10;                            .width(4.dp)&#10;                            .padding(horizontal = 0.dp)&#10;                            .offset(y = (thumbOffset * 200).dp) // Approximate offset calculation&#10;                            .background(&#10;                                MaterialTheme.colorScheme.primary.copy(alpha = 0.7f),&#10;                                RoundedCornerShape(2.dp)&#10;                            )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HoleEditItem(&#10;    hole: Hole,&#10;    onUpdate: (Hole) -&gt; Unit,&#10;    onRemove: () -&gt; Unit,&#10;    canMoveUp: Boolean,&#10;    canMoveDown: Boolean,&#10;    onMoveUp: () -&gt; Unit,&#10;    onMoveDown: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Hole ${hole.holeNumber}&quot;,&#10;                    style = MaterialTheme.typography.titleSmall&#10;                )&#10;&#10;                Row {&#10;                    if (canMoveUp) {&#10;                        IconButton(onClick = onMoveUp) {&#10;                            Icon(Icons.Default.KeyboardArrowUp, contentDescription = &quot;Move Up&quot;)&#10;                        }&#10;                    }&#10;                    if (canMoveDown) {&#10;                        IconButton(onClick = onMoveDown) {&#10;                            Icon(Icons.Default.KeyboardArrowDown, contentDescription = &quot;Move Down&quot;)&#10;                        }&#10;                    }&#10;                    IconButton(onClick = onRemove) {&#10;                        Icon(Icons.Default.Delete, contentDescription = &quot;Remove Hole&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Par adjustment&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Par:&quot;, modifier = Modifier.width(60.dp))&#10;                IconButton(&#10;                    onClick = { if (hole.par &gt; 1) onUpdate(hole.copy(par = hole.par - 1)) }&#10;                ) {&#10;                    Icon(Icons.Default.KeyboardArrowDown, contentDescription = &quot;Decrease Par&quot;)&#10;                }&#10;                Text(&#10;                    text = hole.par.toString(),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    modifier = Modifier.width(40.dp)&#10;                )&#10;                IconButton(&#10;                    onClick = { onUpdate(hole.copy(par = hole.par + 1)) }&#10;                ) {&#10;                    Icon(Icons.Default.Add, contentDescription = &quot;Increase Par&quot;)&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Distance field&#10;            OutlinedTextField(&#10;                value = hole.distance?.toString() ?: &quot;&quot;,&#10;                onValueChange = { value -&gt;&#10;                    val distance = value.toIntOrNull()&#10;                    onUpdate(hole.copy(distance = distance))&#10;                },&#10;                label = { Text(&quot;Distance (m)&quot;) },&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Description field&#10;            OutlinedTextField(&#10;                value = hole.description ?: &quot;&quot;,&#10;                onValueChange = { onUpdate(hole.copy(description = it.ifBlank { null })) },&#10;                label = { Text(&quot;Description&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/courses/CourseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/courses/CourseViewModel.kt" />
              <option name="originalContent" value="package com.peterhenell.discman.ui.courses&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.peterhenell.discman.data.entities.Course&#10;import com.peterhenell.discman.data.entities.Hole&#10;import com.peterhenell.discman.data.repository.DataStorageService&#10;import com.peterhenell.discman.ui.model.CourseWithHoles&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CourseViewModel @Inject constructor(&#10;    private val dataStorage: DataStorageService&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(CourseUiState())&#10;    val uiState = _uiState.asStateFlow()&#10;&#10;    val courses = dataStorage.getAllCourses()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun loadCourse(courseId: Long) {&#10;        _uiState.value = _uiState.value.copy(isEditMode = true, isLoading = true)&#10;        viewModelScope.launch {&#10;            val course = dataStorage.getCourseById(courseId)&#10;            if (course != null) {&#10;                dataStorage.getHolesByCourse(courseId).collect { holes -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        editingCourse = course,&#10;                        editingHoles = holes.toMutableList(),&#10;                        isLoading = false,&#10;                        isEditMode = true&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun startNewCourse() {&#10;        _uiState.value = _uiState.value.copy(&#10;            editingCourse = Course(name = &quot;&quot;, location = &quot;&quot;),&#10;            editingHoles = mutableListOf(),&#10;            isEditMode = false,&#10;            isLoading = false&#10;        )&#10;    }&#10;&#10;    fun updateCourseName(name: String) {&#10;        _uiState.value = _uiState.value.copy(&#10;            editingCourse = _uiState.value.editingCourse?.copy(name = name)&#10;        )&#10;    }&#10;&#10;    fun updateCourseLocation(location: String) {&#10;        _uiState.value = _uiState.value.copy(&#10;            editingCourse = _uiState.value.editingCourse?.copy(location = location)&#10;        )&#10;    }&#10;&#10;    fun addHole() {&#10;        val holes = _uiState.value.editingHoles&#10;        val newHole = Hole(&#10;            courseId = _uiState.value.editingCourse?.courseId ?: 0,&#10;            holeNumber = holes.size + 1,&#10;            par = 3&#10;        )&#10;        holes.add(newHole)&#10;        _uiState.value = _uiState.value.copy(editingHoles = holes)&#10;    }&#10;&#10;    fun updateHole(index: Int, hole: Hole) {&#10;        val holes = _uiState.value.editingHoles&#10;        if (index in holes.indices) {&#10;            holes[index] = hole&#10;            _uiState.value = _uiState.value.copy(editingHoles = holes)&#10;        }&#10;    }&#10;&#10;    fun removeHole(index: Int) {&#10;        val holes = _uiState.value.editingHoles&#10;        if (index in holes.indices) {&#10;            holes.removeAt(index)&#10;            // Update hole numbers&#10;            holes.forEachIndexed { idx, hole -&gt;&#10;                holes[idx] = hole.copy(holeNumber = idx + 1)&#10;            }&#10;            _uiState.value = _uiState.value.copy(editingHoles = holes)&#10;        }&#10;    }&#10;&#10;    fun moveHole(from: Int, to: Int) {&#10;        val holes = _uiState.value.editingHoles&#10;        if (from in holes.indices &amp;&amp; to in holes.indices) {&#10;            val hole = holes.removeAt(from)&#10;            holes.add(to, hole)&#10;            // Update hole numbers&#10;            holes.forEachIndexed { idx, hole -&gt;&#10;                holes[idx] = hole.copy(holeNumber = idx + 1)&#10;            }&#10;            _uiState.value = _uiState.value.copy(editingHoles = holes)&#10;        }&#10;    }&#10;&#10;    fun saveCourse() {&#10;        viewModelScope.launch {&#10;            val course = _uiState.value.editingCourse&#10;            val holes = _uiState.value.editingHoles&#10;&#10;            if (course != null &amp;&amp; course.name.isNotBlank()) {&#10;                val courseId = if (course.courseId == 0L) {&#10;                    dataStorage.insertCourse(course)&#10;                } else {&#10;                    dataStorage.updateCourse(course)&#10;                    course.courseId&#10;                }&#10;&#10;                // Delete existing holes and insert new ones&#10;                dataStorage.deleteHolesByCourse(courseId)&#10;                val holesWithCourseId = holes.map { it.copy(courseId = courseId) }&#10;                dataStorage.insertHoles(holesWithCourseId)&#10;&#10;                clearEditing()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteCourse(course: Course) {&#10;        viewModelScope.launch {&#10;            dataStorage.deleteCourse(course)&#10;        }&#10;    }&#10;&#10;    fun clearEditing() {&#10;        _uiState.value = _uiState.value.copy(&#10;            editingCourse = null,&#10;            editingHoles = mutableListOf(),&#10;            isEditMode = false,&#10;            isLoading = false&#10;        )&#10;    }&#10;}&#10;&#10;data class CourseUiState(&#10;    val editingCourse: Course? = null,&#10;    val editingHoles: MutableList&lt;Hole&gt; = mutableListOf(),&#10;    val isLoading: Boolean = false,&#10;    val isEditMode: Boolean = false  // Track if we're editing an existing course&#10;)&#10;" />
              <option name="updatedContent" value="package com.peterhenell.discman.ui.courses&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.peterhenell.discman.data.entities.Course&#10;import com.peterhenell.discman.data.entities.Hole&#10;import com.peterhenell.discman.data.repository.DataStorageService&#10;import com.peterhenell.discman.ui.model.CourseWithHoles&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CourseViewModel @Inject constructor(&#10;    private val dataStorage: DataStorageService&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(CourseUiState())&#10;    val uiState = _uiState.asStateFlow()&#10;&#10;    val courses = dataStorage.getAllCourses()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun loadCourse(courseId: Long) {&#10;        _uiState.value = _uiState.value.copy(isEditMode = true, isLoading = true)&#10;        viewModelScope.launch {&#10;            val course = dataStorage.getCourseById(courseId)&#10;            if (course != null) {&#10;                dataStorage.getHolesByCourse(courseId).collect { holes -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        editingCourse = course,&#10;                        editingHoles = holes.toMutableList(),&#10;                        isLoading = false,&#10;                        isEditMode = true&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun startNewCourse() {&#10;        _uiState.value = _uiState.value.copy(&#10;            editingCourse = Course(name = &quot;&quot;, location = &quot;&quot;),&#10;            editingHoles = mutableListOf(),&#10;            isEditMode = false,&#10;            isLoading = false&#10;        )&#10;    }&#10;&#10;    fun updateCourseName(name: String) {&#10;        _uiState.value = _uiState.value.copy(&#10;            editingCourse = _uiState.value.editingCourse?.copy(name = name)&#10;        )&#10;    }&#10;&#10;    fun updateCourseLocation(location: String) {&#10;        _uiState.value = _uiState.value.copy(&#10;            editingCourse = _uiState.value.editingCourse?.copy(location = location)&#10;        )&#10;    }&#10;&#10;    fun addHole() {&#10;        val currentHoles = _uiState.value.editingHoles.toMutableList()&#10;        val newHole = Hole(&#10;            courseId = _uiState.value.editingCourse?.courseId ?: 0,&#10;            holeNumber = currentHoles.size + 1,&#10;            par = 3&#10;        )&#10;        currentHoles.add(newHole)&#10;        _uiState.value = _uiState.value.copy(editingHoles = currentHoles)&#10;    }&#10;&#10;    fun updateHole(index: Int, hole: Hole) {&#10;        val currentHoles = _uiState.value.editingHoles.toMutableList()&#10;        if (index in currentHoles.indices) {&#10;            currentHoles[index] = hole&#10;            _uiState.value = _uiState.value.copy(editingHoles = currentHoles)&#10;        }&#10;    }&#10;&#10;    fun removeHole(index: Int) {&#10;        val currentHoles = _uiState.value.editingHoles.toMutableList()&#10;        if (index in currentHoles.indices) {&#10;            currentHoles.removeAt(index)&#10;            // Update hole numbers&#10;            currentHoles.forEachIndexed { idx, hole -&gt;&#10;                currentHoles[idx] = hole.copy(holeNumber = idx + 1)&#10;            }&#10;            _uiState.value = _uiState.value.copy(editingHoles = currentHoles)&#10;        }&#10;    }&#10;&#10;    fun moveHole(from: Int, to: Int) {&#10;        val currentHoles = _uiState.value.editingHoles.toMutableList()&#10;        if (from in currentHoles.indices &amp;&amp; to in currentHoles.indices) {&#10;            val hole = currentHoles.removeAt(from)&#10;            currentHoles.add(to, hole)&#10;            // Update hole numbers&#10;            currentHoles.forEachIndexed { idx, hole -&gt;&#10;                currentHoles[idx] = hole.copy(holeNumber = idx + 1)&#10;            }&#10;            _uiState.value = _uiState.value.copy(editingHoles = currentHoles)&#10;        }&#10;    }&#10;&#10;    fun saveCourse() {&#10;        viewModelScope.launch {&#10;            val course = _uiState.value.editingCourse&#10;            val holes = _uiState.value.editingHoles&#10;&#10;            if (course != null &amp;&amp; course.name.isNotBlank()) {&#10;                val courseId = if (course.courseId == 0L) {&#10;                    dataStorage.insertCourse(course)&#10;                } else {&#10;                    dataStorage.updateCourse(course)&#10;                    course.courseId&#10;                }&#10;&#10;                // Delete existing holes and insert new ones&#10;                dataStorage.deleteHolesByCourse(courseId)&#10;                val holesWithCourseId = holes.map { it.copy(courseId = courseId) }&#10;                dataStorage.insertHoles(holesWithCourseId)&#10;&#10;                clearEditing()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteCourse(course: Course) {&#10;        viewModelScope.launch {&#10;            dataStorage.deleteCourse(course)&#10;        }&#10;    }&#10;&#10;    fun clearEditing() {&#10;        _uiState.value = _uiState.value.copy(&#10;            editingCourse = null,&#10;            editingHoles = mutableListOf(),&#10;            isEditMode = false,&#10;            isLoading = false&#10;        )&#10;    }&#10;}&#10;&#10;data class CourseUiState(&#10;    val editingCourse: Course? = null,&#10;    val editingHoles: MutableList&lt;Hole&gt; = mutableListOf(),&#10;    val isLoading: Boolean = false,&#10;    val isEditMode: Boolean = false  // Track if we're editing an existing course&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/courses/CoursesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/courses/CoursesScreen.kt" />
              <option name="originalContent" value="package com.peterhenell.discman.ui.courses&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import com.peterhenell.discman.data.entities.Course&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CoursesScreen(&#10;    navController: NavController,&#10;    viewModel: CourseViewModel = hiltViewModel()&#10;) {&#10;    val courses by viewModel.courses.collectAsStateWithLifecycle()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Manage Courses&quot;,&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;&#10;            FloatingActionButton(&#10;                onClick = {&#10;                    navController.navigate(&quot;course_edit&quot;)&#10;                },&#10;                modifier = Modifier.size(56.dp)&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Course&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (courses.isEmpty()) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;No courses available.\nTap + to add a course.&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge&#10;                )&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(courses) { course -&gt;&#10;                    CourseListItem(&#10;                        course = course,&#10;                        onEdit = {&#10;                            viewModel.loadCourse(course.courseId)&#10;                            navController.navigate(&quot;course_edit&quot;)&#10;                        },&#10;                        onDelete = { viewModel.deleteCourse(course) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CourseListItem(&#10;    course: Course,&#10;    onEdit: () -&gt; Unit,&#10;    onDelete: () -&gt; Unit&#10;) {&#10;    var showDeleteDialog by remember { mutableStateOf(false) }&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = course.name,&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;                Text(&#10;                    text = course.location,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            Row {&#10;                IconButton(onClick = onEdit) {&#10;                    Icon(Icons.Default.Edit, contentDescription = &quot;Edit Course&quot;)&#10;                }&#10;                IconButton(onClick = { showDeleteDialog = true }) {&#10;                    Icon(Icons.Default.Delete, contentDescription = &quot;Delete Course&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showDeleteDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDeleteDialog = false },&#10;            title = { Text(&quot;Delete Course&quot;) },&#10;            text = { Text(&quot;Are you sure you want to delete ${course.name}?&quot;) },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        onDelete()&#10;                        showDeleteDialog = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;Delete&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDeleteDialog = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.peterhenell.discman.ui.courses&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import com.peterhenell.discman.data.entities.Course&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CoursesScreen(&#10;    navController: NavController,&#10;    viewModel: CourseViewModel = hiltViewModel()&#10;) {&#10;    val courses by viewModel.courses.collectAsStateWithLifecycle()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Manage Courses&quot;,&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;&#10;            FloatingActionButton(&#10;                onClick = {&#10;                    navController.navigate(&quot;course_edit&quot;)&#10;                },&#10;                modifier = Modifier.size(56.dp)&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Course&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (courses.isEmpty()) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;No courses available.\nTap + to add a course.&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge&#10;                )&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(courses) { course -&gt;&#10;                    CourseListItem(&#10;                        course = course,&#10;                        onEdit = {&#10;                            navController.navigate(&quot;course_edit/${course.courseId}&quot;)&#10;                        },&#10;                        onDelete = { viewModel.deleteCourse(course) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CourseListItem(&#10;    course: Course,&#10;    onEdit: () -&gt; Unit,&#10;    onDelete: () -&gt; Unit&#10;) {&#10;    var showDeleteDialog by remember { mutableStateOf(false) }&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = course.name,&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;                Text(&#10;                    text = course.location,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            Row {&#10;                IconButton(onClick = onEdit) {&#10;                    Icon(Icons.Default.Edit, contentDescription = &quot;Edit Course&quot;)&#10;                }&#10;                IconButton(onClick = { showDeleteDialog = true }) {&#10;                    Icon(Icons.Default.Delete, contentDescription = &quot;Delete Course&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showDeleteDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDeleteDialog = false },&#10;            title = { Text(&quot;Delete Course&quot;) },&#10;            text = { Text(&quot;Are you sure you want to delete ${course.name}?&quot;) },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        onDelete()&#10;                        showDeleteDialog = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;Delete&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDeleteDialog = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/game/CompletedGameScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/game/CompletedGameScreen.kt" />
              <option name="originalContent" value="package com.peterhenell.discman.ui.game&#10;&#10;import android.content.Intent&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import com.peterhenell.discman.ui.model.PlayerScore&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CompletedGameScreen(&#10;    gameId: Long,&#10;    navController: NavController,&#10;    viewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val context = LocalContext.current&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    LaunchedEffect(gameId) {&#10;        if (gameId &gt; 0) {&#10;            viewModel.loadGame(gameId)&#10;        }&#10;    }&#10;&#10;    val game = uiState.currentGame&#10;    val course = uiState.selectedCourse&#10;    val holes = uiState.holes&#10;    val playerScores = viewModel.getPlayerScores().sortedBy { it.totalScore }&#10;&#10;    if (game == null || course == null) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator()&#10;        }&#10;        return&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;Game Results&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Game info&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = course.name,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Date: ${SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault()).format(game.startDate)}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Text(&#10;                    text = &quot;Total Par: ${holes.sumOf { it.par }}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Final scores&#10;        Text(&#10;            text = &quot;Final Scores&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Scorecard Table&#10;        Card(&#10;            modifier = Modifier.weight(1f),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Scorecard&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                ScorecardTable(&#10;                    holes = holes,&#10;                    playerScores = playerScores&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Action buttons&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceEvenly&#10;        ) {&#10;            OutlinedButton(&#10;                onClick = {&#10;                    val shareText = buildShareText(course.name, game.startDate, playerScores, holes)&#10;                    val intent = Intent().apply {&#10;                        action = Intent.ACTION_SEND&#10;                        type = &quot;text/plain&quot;&#10;                        putExtra(Intent.EXTRA_TEXT, shareText)&#10;                        putExtra(Intent.EXTRA_SUBJECT, &quot;Disc Golf Scores - ${course.name}&quot;)&#10;                    }&#10;                    context.startActivity(Intent.createChooser(intent, &quot;Share Scores&quot;))&#10;                }&#10;            ) {&#10;                Icon(Icons.Default.Share, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Share&quot;)&#10;            }&#10;&#10;            OutlinedButton(&#10;                onClick = {&#10;                    navController.navigate(&quot;game_scoring/$gameId&quot;)&#10;                }&#10;            ) {&#10;                Icon(Icons.Default.Edit, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Edit&quot;)&#10;            }&#10;&#10;            Button(&#10;                onClick = {&#10;                    navController.navigate(&quot;history&quot;) {&#10;                        popUpTo(&quot;history&quot;) { inclusive = true }&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&quot;Close&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PlayerScoreCard(&#10;    playerScore: PlayerScore,&#10;    position: Int,&#10;    holes: List&lt;com.peterhenell.discman.data.entities.Hole&gt;&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (position == 1)&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            else&#10;                MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;#$position&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.width(40.dp)&#10;                    )&#10;                    Text(&#10;                        text = playerScore.player.name,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.End&#10;                ) {&#10;                    Text(&#10;                        text = when {&#10;                            playerScore.totalScore == 0 -&gt; &quot;Even&quot;&#10;                            playerScore.totalScore &gt; 0 -&gt; &quot;+${playerScore.totalScore}&quot;&#10;                            else -&gt; playerScore.totalScore.toString()&#10;                        },&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = &quot;${playerScore.totalThrows} throws&quot;,&#10;                        style = MaterialTheme.typography.bodySmall&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Hole-by-hole scores&#10;            LazyColumn(&#10;                modifier = Modifier.height(200.dp)&#10;            ) {&#10;                items(holes.chunked(4)) { holeChunk -&gt;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceEvenly&#10;                    ) {&#10;                        holeChunk.forEach { hole -&gt;&#10;                            val throws = playerScore.holeScores[hole.holeNumber] ?: hole.par&#10;                            val score = throws - hole.par&#10;&#10;                            Column(&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                modifier = Modifier.weight(1f)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;H${hole.holeNumber}&quot;,&#10;                                    style = MaterialTheme.typography.labelSmall&#10;                                )&#10;                                Text(&#10;                                    text = throws.toString(),&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = when {&#10;                                        score == 0 -&gt; &quot;Par&quot;&#10;                                        score &gt; 0 -&gt; &quot;+$score&quot;&#10;                                        else -&gt; score.toString()&#10;                                    },&#10;                                    style = MaterialTheme.typography.labelSmall,&#10;                                    color = when {&#10;                                        score &lt; 0 -&gt; MaterialTheme.colorScheme.primary&#10;                                        score &gt; 0 -&gt; MaterialTheme.colorScheme.error&#10;                                        else -&gt; MaterialTheme.colorScheme.onSurface&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun buildShareText(&#10;    courseName: String,&#10;    gameDate: Date,&#10;    playerScores: List&lt;PlayerScore&gt;,&#10;    holes: List&lt;com.peterhenell.discman.data.entities.Hole&gt;&#10;): String {&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;    val builder = StringBuilder()&#10;&#10;    builder.appendLine(&quot; Disc Golf Scores&quot;)&#10;    builder.appendLine(&quot;Course: $courseName&quot;)&#10;    builder.appendLine(&quot;Date: ${dateFormat.format(gameDate)}&quot;)&#10;    builder.appendLine(&quot;Total Par: ${holes.sumOf { it.par }}&quot;)&#10;    builder.appendLine()&#10;&#10;    builder.appendLine(&quot;Final Results:&quot;)&#10;    playerScores.forEachIndexed { index, playerScore -&gt;&#10;        val position = index + 1&#10;        val scoreText = when {&#10;            playerScore.totalScore == 0 -&gt; &quot;Even&quot;&#10;            playerScore.totalScore &gt; 0 -&gt; &quot;+${playerScore.totalScore}&quot;&#10;            else -&gt; playerScore.totalScore.toString()&#10;        }&#10;        builder.appendLine(&quot;$position. ${playerScore.player.name}: $scoreText (${playerScore.totalThrows} throws)&quot;)&#10;    }&#10;&#10;    return builder.toString()&#10;}&#10;&#10;@Composable&#10;fun ScorecardTable(&#10;    holes: List&lt;com.peterhenell.discman.data.entities.Hole&gt;,&#10;    playerScores: List&lt;PlayerScore&gt;&#10;) {&#10;    val scrollState = rememberScrollState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .verticalScroll(scrollState)&#10;    ) {&#10;        // Header row&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Player&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.weight(2f)&#10;            )&#10;&#10;            holes.forEach { hole -&gt;&#10;                Text(&#10;                    text = &quot;H${hole.holeNumber}&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = &quot;Total&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.weight(1f),&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Player rows&#10;        playerScores.forEach { playerScore -&gt;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = playerScore.player.name,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Medium,&#10;                    modifier = Modifier.weight(2f)&#10;                )&#10;&#10;                holes.forEach { hole -&gt;&#10;                    val throws = playerScore.holeScores[hole.holeNumber] ?: hole.par&#10;                    val score = throws - hole.par&#10;&#10;                    Text(&#10;                        text = when {&#10;                            score == 0 -&gt; &quot;Par&quot;&#10;                            score &gt; 0 -&gt; &quot;+$score&quot;&#10;                            else -&gt; score.toString()&#10;                        },&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .border(1.dp, MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f), RoundedCornerShape(4.dp))&#10;                            .padding(8.dp),&#10;                        textAlign = TextAlign.Center,&#10;                        color = when {&#10;                            score &lt; 0 -&gt; MaterialTheme.colorScheme.primary&#10;                            score &gt; 0 -&gt; MaterialTheme.colorScheme.error&#10;                            else -&gt; MaterialTheme.colorScheme.onSurface&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Total score&#10;                Text(&#10;                    text = when {&#10;                        playerScore.totalScore == 0 -&gt; &quot;Even&quot;&#10;                        playerScore.totalScore &gt; 0 -&gt; &quot;+${playerScore.totalScore}&quot;&#10;                        else -&gt; playerScore.totalScore.toString()&#10;                    },&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.peterhenell.discman.ui.game&#10;&#10;import android.content.Intent&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import com.peterhenell.discman.ui.model.PlayerScore&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CompletedGameScreen(&#10;    gameId: Long,&#10;    navController: NavController,&#10;    viewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val context = LocalContext.current&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    LaunchedEffect(gameId) {&#10;        if (gameId &gt; 0) {&#10;            viewModel.loadGame(gameId)&#10;        }&#10;    }&#10;&#10;    val game = uiState.currentGame&#10;    val course = uiState.selectedCourse&#10;    val holes = uiState.holes&#10;    val playerScores = viewModel.getPlayerScores().sortedBy { it.totalScore }&#10;&#10;    if (game == null || course == null) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator()&#10;        }&#10;        return&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;Game Results&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Game info&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = course.name,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Date: ${SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault()).format(game.startDate)}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Text(&#10;                    text = &quot;Total Par: ${holes.sumOf { it.par }}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Final scores&#10;        Text(&#10;            text = &quot;Final Scores&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Scorecard Table&#10;        Card(&#10;            modifier = Modifier.weight(1f),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Scorecard&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                ScorecardTable(&#10;                    holes = holes,&#10;                    playerScores = playerScores&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Action buttons&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceEvenly&#10;        ) {&#10;            OutlinedButton(&#10;                onClick = {&#10;                    val shareText = buildShareText(course.name, game.startDate, playerScores, holes)&#10;                    val intent = Intent().apply {&#10;                        action = Intent.ACTION_SEND&#10;                        type = &quot;text/plain&quot;&#10;                        putExtra(Intent.EXTRA_TEXT, shareText)&#10;                        putExtra(Intent.EXTRA_SUBJECT, &quot;Disc Golf Scores - ${course.name}&quot;)&#10;                    }&#10;                    context.startActivity(Intent.createChooser(intent, &quot;Share Scores&quot;))&#10;                }&#10;            ) {&#10;                Icon(Icons.Default.Share, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Share&quot;)&#10;            }&#10;&#10;            OutlinedButton(&#10;                onClick = {&#10;                    navController.navigate(&quot;game_scoring/$gameId&quot;)&#10;                }&#10;            ) {&#10;                Icon(Icons.Default.Edit, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Edit&quot;)&#10;            }&#10;&#10;            Button(&#10;                onClick = {&#10;                    navController.navigate(&quot;history&quot;) {&#10;                        popUpTo(&quot;history&quot;) { inclusive = true }&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&quot;Close&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ScorecardTable(&#10;    holes: List&lt;com.peterhenell.discman.data.entities.Hole&gt;,&#10;    playerScores: List&lt;PlayerScore&gt;&#10;) {&#10;    val scrollState = rememberScrollState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .verticalScroll(scrollState)&#10;    ) {&#10;        // Header row&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;Player&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.weight(2f)&#10;            )&#10;&#10;            holes.forEach { hole -&gt;&#10;                Text(&#10;                    text = &quot;H${hole.holeNumber}&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = &quot;Total&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.weight(1f),&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Player rows&#10;        playerScores.forEach { playerScore -&gt;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = playerScore.player.name,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Medium,&#10;                    modifier = Modifier.weight(2f)&#10;                )&#10;&#10;                holes.forEach { hole -&gt;&#10;                    val throws = playerScore.holeScores[hole.holeNumber] ?: hole.par&#10;                    val score = throws - hole.par&#10;&#10;                    Text(&#10;                        text = when {&#10;                            score == 0 -&gt; &quot;Par&quot;&#10;                            score &gt; 0 -&gt; &quot;+$score&quot;&#10;                            else -&gt; score.toString()&#10;                        },&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .border(1.dp, MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f), RoundedCornerShape(4.dp))&#10;                            .padding(8.dp),&#10;                        textAlign = TextAlign.Center,&#10;                        color = when {&#10;                            score &lt; 0 -&gt; MaterialTheme.colorScheme.primary&#10;                            score &gt; 0 -&gt; MaterialTheme.colorScheme.error&#10;                            else -&gt; MaterialTheme.colorScheme.onSurface&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Total score&#10;                Text(&#10;                    text = when {&#10;                        playerScore.totalScore == 0 -&gt; &quot;Even&quot;&#10;                        playerScore.totalScore &gt; 0 -&gt; &quot;+${playerScore.totalScore}&quot;&#10;                        else -&gt; playerScore.totalScore.toString()&#10;                    },&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun buildShareText(&#10;    courseName: String,&#10;    gameDate: Date,&#10;    playerScores: List&lt;PlayerScore&gt;,&#10;    holes: List&lt;com.peterhenell.discman.data.entities.Hole&gt;&#10;): String {&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;    val builder = StringBuilder()&#10;&#10;    builder.appendLine(&quot; Disc Golf Scores&quot;)&#10;    builder.appendLine(&quot;Course: $courseName&quot;)&#10;    builder.appendLine(&quot;Date: ${dateFormat.format(gameDate)}&quot;)&#10;    builder.appendLine(&quot;Total Par: ${holes.sumOf { it.par }}&quot;)&#10;    builder.appendLine()&#10;&#10;    builder.appendLine(&quot;Final Results:&quot;)&#10;    playerScores.forEachIndexed { index, playerScore -&gt;&#10;        val position = index + 1&#10;        val scoreText = when {&#10;            playerScore.totalScore == 0 -&gt; &quot;Even&quot;&#10;            playerScore.totalScore &gt; 0 -&gt; &quot;+${playerScore.totalScore}&quot;&#10;            else -&gt; playerScore.totalScore.toString()&#10;        }&#10;        builder.appendLine(&quot;$position. ${playerScore.player.name}: $scoreText (${playerScore.totalThrows} throws)&quot;)&#10;    }&#10;&#10;    return builder.toString()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/game/GameScoringScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/game/GameScoringScreen.kt" />
              <option name="originalContent" value="package com.peterhenell.discman.ui.game&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import com.peterhenell.discman.data.entities.Player&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun GameScoringScreen(&#10;    gameId: Long,&#10;    navController: NavController,&#10;    viewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    LaunchedEffect(gameId) {&#10;        if (gameId &gt; 0) {&#10;            viewModel.loadGame(gameId)&#10;        }&#10;    }&#10;&#10;    val game = uiState.currentGame&#10;    val course = uiState.selectedCourse&#10;    val players = uiState.selectedPlayers&#10;    val holes = uiState.holes&#10;    val playerScores = viewModel.getPlayerScores()&#10;&#10;    if (game == null || course == null) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator()&#10;        }&#10;        return&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Game details header&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = course.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Date: ${SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault()).format(game.startDate)}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Text(&#10;                    text = &quot;Total Par: ${holes.sumOf { it.par }}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Scoring grid&#10;        LazyColumn(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            // Header row&#10;            item {&#10;                ScoringHeaderRow(players = players)&#10;            }&#10;&#10;            // Hole rows&#10;            itemsIndexed(holes) { index, hole -&gt;&#10;                ScoringHoleRow(&#10;                    hole = hole,&#10;                    players = players,&#10;                    playerScores = playerScores,&#10;                    isCurrentHole = hole.holeNumber == uiState.currentHole,&#10;                    onHoleClick = { viewModel.setCurrentHole(hole.holeNumber) },&#10;                    onScoreChange = { playerId, throws -&gt;&#10;                        viewModel.updatePlayerThrows(playerId, hole.holeNumber, throws)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Action buttons&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            OutlinedButton(&#10;                onClick = { viewModel.nextHole() },&#10;                enabled = uiState.currentHole &lt; holes.size&#10;            ) {&#10;                Text(&quot;Next Hole&quot;)&#10;                Icon(Icons.Default.ArrowForward, contentDescription = null)&#10;            }&#10;&#10;            Button(&#10;                onClick = {&#10;                    navController.navigate(&quot;completed_game/$gameId&quot;)&#10;                }&#10;            ) {&#10;                Text(&quot;Complete Game&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ScoringHeaderRow(players: List&lt;Player&gt;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(MaterialTheme.colorScheme.primaryContainer)&#10;            .padding(8.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Hole&quot;,&#10;            modifier = Modifier.weight(1f),&#10;            fontWeight = FontWeight.Bold,&#10;            textAlign = TextAlign.Center&#10;        )&#10;        players.forEach { player -&gt;&#10;            Text(&#10;                text = player.name,&#10;                modifier = Modifier.weight(1f),&#10;                fontWeight = FontWeight.Bold,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ScoringHoleRow(&#10;    hole: com.peterhenell.discman.data.entities.Hole,&#10;    players: List&lt;Player&gt;,&#10;    playerScores: List&lt;com.peterhenell.discman.ui.model.PlayerScore&gt;,&#10;    isCurrentHole: Boolean,&#10;    onHoleClick: () -&gt; Unit,&#10;    onScoreChange: (Long, Int) -&gt; Unit&#10;) {&#10;    Column {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(&#10;                    if (isCurrentHole)&#10;                        MaterialTheme.colorScheme.secondaryContainer&#10;                    else&#10;                        MaterialTheme.colorScheme.surface&#10;                )&#10;                .clickable { onHoleClick() }&#10;                .padding(8.dp)&#10;        ) {&#10;            // Hole number and par&#10;            Text(&#10;                text = &quot;${hole.holeNumber}\n(${hole.par})&quot;,&#10;                modifier = Modifier.weight(1f),&#10;                textAlign = TextAlign.Center,&#10;                fontWeight = if (isCurrentHole) FontWeight.Bold else FontWeight.Normal&#10;            )&#10;&#10;            // Player scores&#10;            players.forEach { player -&gt;&#10;                val playerScore = playerScores.find { it.player.playerId == player.playerId }&#10;                val throws = playerScore?.holeScores?.get(hole.holeNumber) ?: hole.par&#10;&#10;                Text(&#10;                    text = throws.toString(),&#10;                    modifier = Modifier.weight(1f),&#10;                    textAlign = TextAlign.Center,&#10;                    fontWeight = if (isCurrentHole) FontWeight.Bold else FontWeight.Normal&#10;                )&#10;            }&#10;        }&#10;&#10;        // Expanded current hole view&#10;        if (isCurrentHole) {&#10;            CurrentHoleView(&#10;                hole = hole,&#10;                players = players,&#10;                playerScores = playerScores,&#10;                onScoreChange = onScoreChange&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CurrentHoleView(&#10;    hole: com.peterhenell.discman.data.entities.Hole,&#10;    players: List&lt;Player&gt;,&#10;    playerScores: List&lt;com.peterhenell.discman.ui.model.PlayerScore&gt;,&#10;    onScoreChange: (Long, Int) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(8.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Hole ${hole.holeNumber} - Par ${hole.par}&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            hole.distance?.let { distance -&gt;&#10;                Text(&#10;                    text = &quot;Distance: ${distance}m&quot;,&#10;                    style = MaterialTheme.typography.bodySmall&#10;                )&#10;            }&#10;&#10;            hole.description?.let { description -&gt;&#10;                Text(&#10;                    text = description,&#10;                    style = MaterialTheme.typography.bodySmall&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            players.forEach { player -&gt;&#10;                val playerScore = playerScores.find { it.player.playerId == player.playerId }&#10;                val currentThrows = playerScore?.holeScores?.get(hole.holeNumber) ?: hole.par&#10;                val score = currentThrows - hole.par&#10;&#10;                PlayerScoreRow(&#10;                    player = player,&#10;                    throws = currentThrows,&#10;                    score = score,&#10;                    onThrowsChange = { newThrows -&gt;&#10;                        onScoreChange(player.playerId, newThrows)&#10;                    }&#10;                )&#10;&#10;                if (player != players.last()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PlayerScoreRow(&#10;    player: Player,&#10;    throws: Int,&#10;    score: Int,&#10;    onThrowsChange: (Int) -&gt; Unit&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = player.name,&#10;            modifier = Modifier.weight(1f),&#10;            style = MaterialTheme.typography.bodyLarge&#10;        )&#10;&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(&#10;                onClick = { if (throws &gt; 1) onThrowsChange(throws - 1) }&#10;            ) {&#10;                Icon(Icons.Default.KeyboardArrowDown, contentDescription = &quot;Decrease throws&quot;)&#10;            }&#10;&#10;            Text(&#10;                text = throws.toString(),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                modifier = Modifier.width(40.dp),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            IconButton(&#10;                onClick = { onThrowsChange(throws + 1) }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Increase throws&quot;)&#10;            }&#10;&#10;            Text(&#10;                text = when {&#10;                    score == 0 -&gt; &quot;Par&quot;&#10;                    score &gt; 0 -&gt; &quot;+$score&quot;&#10;                    else -&gt; score.toString()&#10;                },&#10;                modifier = Modifier.width(60.dp),&#10;                textAlign = TextAlign.End,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.peterhenell.discman.ui.game&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import com.peterhenell.discman.data.entities.Player&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun GameScoringScreen(&#10;    gameId: Long,&#10;    navController: NavController,&#10;    viewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    LaunchedEffect(gameId) {&#10;        if (gameId &gt; 0) {&#10;            viewModel.loadGame(gameId)&#10;        }&#10;    }&#10;&#10;    val game = uiState.currentGame&#10;    val course = uiState.selectedCourse&#10;    val players = uiState.selectedPlayers&#10;    val holes = uiState.holes&#10;    val playerScores = viewModel.getPlayerScores()&#10;&#10;    if (game == null || course == null) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator()&#10;        }&#10;        return&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Game details header&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = course.name,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Date: ${SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault()).format(game.startDate)}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                Text(&#10;                    text = &quot;Total Par: ${holes.sumOf { it.par }}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Scoring grid&#10;        Box(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            val listState = rememberLazyListState()&#10;&#10;            LazyColumn(&#10;                state = listState&#10;            ) {&#10;                // Header row&#10;                item {&#10;                    ScoringHeaderRow(players = players)&#10;                }&#10;&#10;                // Hole rows&#10;                itemsIndexed(holes) { index, hole -&gt;&#10;                    ScoringHoleRow(&#10;                        hole = hole,&#10;                        players = players,&#10;                        playerScores = playerScores,&#10;                        isCurrentHole = hole.holeNumber == uiState.currentHole,&#10;                        onHoleClick = { viewModel.setCurrentHole(hole.holeNumber) },&#10;                        onScoreChange = { playerId, throws -&gt;&#10;                            viewModel.updatePlayerThrows(playerId, hole.holeNumber, throws)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Custom scrollbar indicator&#10;            if (holes.size &gt; 1) {&#10;                val firstVisibleIndex by remember {&#10;                    derivedStateOf { listState.firstVisibleItemIndex }&#10;                }&#10;                val layoutInfo = listState.layoutInfo&#10;                val totalItems = layoutInfo.totalItemsCount&#10;                val visibleItems = layoutInfo.visibleItemsInfo.size&#10;&#10;                // Only show scrollbar if there are items that extend beyond the visible area&#10;                if (totalItems &gt; visibleItems) {&#10;                    val scrollProgress = if (totalItems &gt; 1) {&#10;                        firstVisibleIndex.toFloat() / (totalItems - visibleItems).coerceAtLeast(1)&#10;                    } else 0f&#10;&#10;                    // Scrollbar track&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .align(Alignment.CenterEnd)&#10;                            .fillMaxHeight()&#10;                            .width(4.dp)&#10;                            .padding(vertical = 8.dp)&#10;                            .background(&#10;                                Color.Gray.copy(alpha = 0.3f),&#10;                                RoundedCornerShape(2.dp)&#10;                            )&#10;                    )&#10;&#10;                    // Scrollbar thumb&#10;                    val thumbHeight = 0.3f // 30% of track height&#10;                    val thumbOffset = scrollProgress * (1f - thumbHeight)&#10;&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .align(Alignment.CenterEnd)&#10;                            .fillMaxHeight(thumbHeight)&#10;                            .width(4.dp)&#10;                            .padding(horizontal = 0.dp)&#10;                            .offset(y = (thumbOffset * 200).dp) // Approximate offset calculation&#10;                            .background(&#10;                                MaterialTheme.colorScheme.primary.copy(alpha = 0.7f),&#10;                                RoundedCornerShape(2.dp)&#10;                            )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Action buttons&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            OutlinedButton(&#10;                onClick = { viewModel.nextHole() },&#10;                enabled = uiState.currentHole &lt; holes.size&#10;            ) {&#10;                Text(&quot;Next Hole&quot;)&#10;                Icon(Icons.Default.ArrowForward, contentDescription = null)&#10;            }&#10;&#10;            Button(&#10;                onClick = {&#10;                    navController.navigate(&quot;completed_game/$gameId&quot;)&#10;                }&#10;            ) {&#10;                Text(&quot;Complete Game&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ScoringHeaderRow(players: List&lt;Player&gt;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(MaterialTheme.colorScheme.primaryContainer)&#10;            .padding(8.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Hole&quot;,&#10;            modifier = Modifier.weight(1f),&#10;            fontWeight = FontWeight.Bold,&#10;            textAlign = TextAlign.Center&#10;        )&#10;        players.forEach { player -&gt;&#10;            Text(&#10;                text = player.name,&#10;                modifier = Modifier.weight(1f),&#10;                fontWeight = FontWeight.Bold,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ScoringHoleRow(&#10;    hole: com.peterhenell.discman.data.entities.Hole,&#10;    players: List&lt;Player&gt;,&#10;    playerScores: List&lt;com.peterhenell.discman.ui.model.PlayerScore&gt;,&#10;    isCurrentHole: Boolean,&#10;    onHoleClick: () -&gt; Unit,&#10;    onScoreChange: (Long, Int) -&gt; Unit&#10;) {&#10;    Column {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(&#10;                    if (isCurrentHole)&#10;                        MaterialTheme.colorScheme.secondaryContainer&#10;                    else&#10;                        MaterialTheme.colorScheme.surface&#10;                )&#10;                .clickable { onHoleClick() }&#10;                .padding(8.dp)&#10;        ) {&#10;            // Hole number and par&#10;            Text(&#10;                text = &quot;${hole.holeNumber}\n(${hole.par})&quot;,&#10;                modifier = Modifier.weight(1f),&#10;                textAlign = TextAlign.Center,&#10;                fontWeight = if (isCurrentHole) FontWeight.Bold else FontWeight.Normal&#10;            )&#10;&#10;            // Player scores&#10;            players.forEach { player -&gt;&#10;                val playerScore = playerScores.find { it.player.playerId == player.playerId }&#10;                val throws = playerScore?.holeScores?.get(hole.holeNumber) ?: hole.par&#10;&#10;                Text(&#10;                    text = throws.toString(),&#10;                    modifier = Modifier.weight(1f),&#10;                    textAlign = TextAlign.Center,&#10;                    fontWeight = if (isCurrentHole) FontWeight.Bold else FontWeight.Normal&#10;                )&#10;            }&#10;        }&#10;&#10;        // Expanded current hole view&#10;        if (isCurrentHole) {&#10;            CurrentHoleView(&#10;                hole = hole,&#10;                players = players,&#10;                playerScores = playerScores,&#10;                onScoreChange = onScoreChange&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CurrentHoleView(&#10;    hole: com.peterhenell.discman.data.entities.Hole,&#10;    players: List&lt;Player&gt;,&#10;    playerScores: List&lt;com.peterhenell.discman.ui.model.PlayerScore&gt;,&#10;    onScoreChange: (Long, Int) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(8.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Hole ${hole.holeNumber} - Par ${hole.par}&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            hole.distance?.let { distance -&gt;&#10;                Text(&#10;                    text = &quot;Distance: ${distance}m&quot;,&#10;                    style = MaterialTheme.typography.bodySmall&#10;                )&#10;            }&#10;&#10;            hole.description?.let { description -&gt;&#10;                Text(&#10;                    text = description,&#10;                    style = MaterialTheme.typography.bodySmall&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            players.forEach { player -&gt;&#10;                val playerScore = playerScores.find { it.player.playerId == player.playerId }&#10;                val currentThrows = playerScore?.holeScores?.get(hole.holeNumber) ?: hole.par&#10;                val score = currentThrows - hole.par&#10;&#10;                PlayerScoreRow(&#10;                    player = player,&#10;                    throws = currentThrows,&#10;                    score = score,&#10;                    onThrowsChange = { newThrows -&gt;&#10;                        onScoreChange(player.playerId, newThrows)&#10;                    }&#10;                )&#10;&#10;                if (player != players.last()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PlayerScoreRow(&#10;    player: Player,&#10;    throws: Int,&#10;    score: Int,&#10;    onThrowsChange: (Int) -&gt; Unit&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = player.name,&#10;            modifier = Modifier.weight(1f),&#10;            style = MaterialTheme.typography.bodyLarge&#10;        )&#10;&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(&#10;                onClick = { if (throws &gt; 1) onThrowsChange(throws - 1) }&#10;            ) {&#10;                Icon(Icons.Default.KeyboardArrowDown, contentDescription = &quot;Decrease throws&quot;)&#10;            }&#10;&#10;            Text(&#10;                text = throws.toString(),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                modifier = Modifier.width(40.dp),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            IconButton(&#10;                onClick = { onThrowsChange(throws + 1) }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Increase throws&quot;)&#10;            }&#10;&#10;            Text(&#10;                text = when {&#10;                    score == 0 -&gt; &quot;Par&quot;&#10;                    score &gt; 0 -&gt; &quot;+$score&quot;&#10;                    else -&gt; score.toString()&#10;                },&#10;                modifier = Modifier.width(60.dp),&#10;                textAlign = TextAlign.End,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/game/PlayGameScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/peterhenell/discman/ui/game/PlayGameScreen.kt" />
              <option name="originalContent" value="package com.peterhenell.discman.ui.game&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import com.peterhenell.discman.data.entities.Course&#10;import com.peterhenell.discman.data.entities.Player&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PlayGameScreen(&#10;    navController: NavController,&#10;    viewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val courses by viewModel.courses.collectAsStateWithLifecycle()&#10;    val players by viewModel.players.collectAsStateWithLifecycle()&#10;&#10;    var showCourseDropdown by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Start New Game&quot;,&#10;            style = MaterialTheme.typography.headlineMedium&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Course selection&#10;        Text(&#10;            text = &quot;Select Course&quot;,&#10;            style = MaterialTheme.typography.titleMedium&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        ExposedDropdownMenuBox(&#10;            expanded = showCourseDropdown,&#10;            onExpandedChange = { showCourseDropdown = it }&#10;        ) {&#10;            OutlinedTextField(&#10;                value = uiState.selectedCourse?.name ?: &quot;Select a course&quot;,&#10;                onValueChange = {},&#10;                readOnly = true,&#10;                trailingIcon = {&#10;                    ExposedDropdownMenuDefaults.TrailingIcon(expanded = showCourseDropdown)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .menuAnchor()&#10;            )&#10;&#10;            ExposedDropdownMenu(&#10;                expanded = showCourseDropdown,&#10;                onDismissRequest = { showCourseDropdown = false }&#10;            ) {&#10;                courses.sortedBy { it.name }.forEach { course -&gt;&#10;                    DropdownMenuItem(&#10;                        text = {&#10;                            Column {&#10;                                Text(course.name)&#10;                                Text(&#10;                                    text = course.location,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        },&#10;                        onClick = {&#10;                            viewModel.selectCourse(course)&#10;                            showCourseDropdown = false&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Player selection&#10;        Text(&#10;            text = &quot;Select Players&quot;,&#10;            style = MaterialTheme.typography.titleMedium&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        if (players.isEmpty()) {&#10;            Text(&#10;                text = &quot;No players available. Please add players first.&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        } else {&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(4.dp),&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                items(players) { player -&gt;&#10;                    PlayerSelectionItem(&#10;                        player = player,&#10;                        isSelected = uiState.selectedPlayers.contains(player),&#10;                        onToggle = { viewModel.togglePlayerSelection(player) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Start game button&#10;        Button(&#10;            onClick = {&#10;                viewModel.startGame()&#10;            },&#10;            enabled = uiState.selectedCourse != null &amp;&amp; uiState.selectedPlayers.isNotEmpty(),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Icon(Icons.Default.PlayArrow, contentDescription = null)&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;Start Game&quot;)&#10;        }&#10;    }&#10;&#10;    // Handle navigation when game is created&#10;    LaunchedEffect(uiState.currentGame) {&#10;        uiState.currentGame?.let { game -&gt;&#10;            navController.navigate(&quot;game_scoring/${game.gameId}&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PlayerSelectionItem(&#10;    player: Player,&#10;    isSelected: Boolean,&#10;    onToggle: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isSelected)&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            else&#10;                MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = player.name,&#10;                style = MaterialTheme.typography.titleMedium&#10;            )&#10;&#10;            Checkbox(&#10;                checked = isSelected,&#10;                onCheckedChange = { onToggle() }&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.peterhenell.discman.ui.game&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.navigation.NavController&#10;import com.peterhenell.discman.data.entities.Course&#10;import com.peterhenell.discman.data.entities.Player&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PlayGameScreen(&#10;    navController: NavController,&#10;    viewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val courses by viewModel.courses.collectAsStateWithLifecycle()&#10;    val players by viewModel.players.collectAsStateWithLifecycle()&#10;&#10;    var showCourseDropdown by remember { mutableStateOf(false) }&#10;    var hasUserStartedGame by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Start New Game&quot;,&#10;            style = MaterialTheme.typography.headlineMedium&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Course selection&#10;        Text(&#10;            text = &quot;Select Course&quot;,&#10;            style = MaterialTheme.typography.titleMedium&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        ExposedDropdownMenuBox(&#10;            expanded = showCourseDropdown,&#10;            onExpandedChange = { showCourseDropdown = it }&#10;        ) {&#10;            OutlinedTextField(&#10;                value = uiState.selectedCourse?.name ?: &quot;Select a course&quot;,&#10;                onValueChange = {},&#10;                readOnly = true,&#10;                trailingIcon = {&#10;                    ExposedDropdownMenuDefaults.TrailingIcon(expanded = showCourseDropdown)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .menuAnchor()&#10;            )&#10;&#10;            ExposedDropdownMenu(&#10;                expanded = showCourseDropdown,&#10;                onDismissRequest = { showCourseDropdown = false }&#10;            ) {&#10;                courses.sortedBy { it.name }.forEach { course -&gt;&#10;                    DropdownMenuItem(&#10;                        text = {&#10;                            Column {&#10;                                Text(course.name)&#10;                                Text(&#10;                                    text = course.location,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        },&#10;                        onClick = {&#10;                            viewModel.selectCourse(course)&#10;                            showCourseDropdown = false&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Player selection&#10;        Text(&#10;            text = &quot;Select Players&quot;,&#10;            style = MaterialTheme.typography.titleMedium&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        if (players.isEmpty()) {&#10;            Text(&#10;                text = &quot;No players available. Please add players first.&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        } else {&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(4.dp),&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                items(players) { player -&gt;&#10;                    PlayerSelectionItem(&#10;                        player = player,&#10;                        isSelected = uiState.selectedPlayers.contains(player),&#10;                        onToggle = { viewModel.togglePlayerSelection(player) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Start game button&#10;        Button(&#10;            onClick = {&#10;                hasUserStartedGame = true&#10;                viewModel.startGame()&#10;            },&#10;            enabled = uiState.selectedCourse != null &amp;&amp; uiState.selectedPlayers.isNotEmpty(),&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Icon(Icons.Default.PlayArrow, contentDescription = null)&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;Start Game&quot;)&#10;        }&#10;    }&#10;&#10;    // Handle navigation when game is created - only if user actually started a game&#10;    LaunchedEffect(uiState.currentGame) {&#10;        if (hasUserStartedGame &amp;&amp; uiState.currentGame != null) {&#10;            navController.navigate(&quot;game_scoring/${uiState.currentGame!!.gameId}&quot;)&#10;            hasUserStartedGame = false // Reset flag&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PlayerSelectionItem(&#10;    player: Player,&#10;    isSelected: Boolean,&#10;    onToggle: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isSelected)&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            else&#10;                MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = player.name,&#10;                style = MaterialTheme.typography.titleMedium&#10;            )&#10;&#10;            Checkbox(&#10;                checked = isSelected,&#10;                onCheckedChange = { onToggle() }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.ksp) apply false&#10;    alias(libs.plugins.hilt) apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.6.1&quot;&#10;kotlin = &quot;1.9.25&quot;&#10;ksp = &quot;1.9.25-1.0.20&quot;&#10;hilt = &quot;2.48&quot;&#10;coreKtx = &quot;1.13.1&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.8.6&quot;&#10;activityCompose = &quot;1.9.2&quot;&#10;composeBom = &quot;2024.09.02&quot;&#10;composeCompiler = &quot;1.5.14&quot;&#10;room = &quot;2.6.1&quot;&#10;navigation = &quot;2.8.2&quot;&#10;lifecycle = &quot;2.8.6&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-room-runtime = { group = &quot;androidx.room&quot;, name = &quot;room-runtime&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-compiler = { group = &quot;androidx.room&quot;, name = &quot;room-compiler&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-ktx = { group = &quot;androidx.room&quot;, name = &quot;room-ktx&quot;, version.ref = &quot;room&quot; }&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigation&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycle&quot; }&#10;androidx-hilt-navigation-compose = { group = &quot;androidx.hilt&quot;, name = &quot;hilt-navigation-compose&quot;, version = &quot;1.2.0&quot; }&#10;hilt-android = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-android&quot;, version.ref = &quot;hilt&quot; }&#10;hilt-compiler = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-compiler&quot;, version.ref = &quot;hilt&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;ksp = { id = &quot;com.google.devtools.ksp&quot;, version.ref = &quot;ksp&quot; }&#10;hilt = { id = &quot;com.google.dagger.hilt.android&quot;, version.ref = &quot;hilt&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.6.1&quot;&#10;kotlin = &quot;1.9.25&quot;&#10;ksp = &quot;1.9.25-1.0.20&quot;&#10;hilt = &quot;2.48&quot;&#10;coreKtx = &quot;1.13.1&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.8.6&quot;&#10;activityCompose = &quot;1.9.2&quot;&#10;composeBom = &quot;2024.09.02&quot;&#10;composeCompiler = &quot;1.5.15&quot;&#10;room = &quot;2.6.1&quot;&#10;navigation = &quot;2.8.2&quot;&#10;lifecycle = &quot;2.8.6&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-room-runtime = { group = &quot;androidx.room&quot;, name = &quot;room-runtime&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-compiler = { group = &quot;androidx.room&quot;, name = &quot;room-compiler&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-ktx = { group = &quot;androidx.room&quot;, name = &quot;room-ktx&quot;, version.ref = &quot;room&quot; }&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigation&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycle&quot; }&#10;androidx-hilt-navigation-compose = { group = &quot;androidx.hilt&quot;, name = &quot;hilt-navigation-compose&quot;, version = &quot;1.2.0&quot; }&#10;hilt-android = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-android&quot;, version.ref = &quot;hilt&quot; }&#10;hilt-compiler = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-compiler&quot;, version.ref = &quot;hilt&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;ksp = { id = &quot;com.google.devtools.ksp&quot;, version.ref = &quot;ksp&quot; }&#10;hilt = { id = &quot;com.google.dagger.hilt.android&quot;, version.ref = &quot;hilt&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>